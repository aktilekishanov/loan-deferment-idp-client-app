from datetime import datetime
import re

import boto3
from botocore.exceptions import BotoCoreError, NoCredentialsError, ClientError
import streamlit as st

# ======================= UI –ß–ê–°–¢–¨ =========================
st.set_page_config(page_title="S3 File Uploader", layout="centered")

st.write("")
st.title("RB Loan Deferment IDP")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –≤ Amazon S3.")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
AWS_PROFILE = ""   # –ø—Ä–æ—Ñ–∏–ª—å AWS –∏–∑ ~/.aws/credentials (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è env/role)
AWS_REGION = "us-east-1"   # —Ä–µ–≥–∏–æ–Ω AWS
BUCKET_NAME = "loan-deferment-idp-event-triggered-tlek"  # –∏–º—è S3-–±–∞–∫–µ—Ç–∞
KEY_PREFIX = "requests/"  # –±–∞–∑–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫

# --- –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
st.markdown("""
<style>
.block-container{max-width:980px;padding-top:1.25rem;}
.meta{color:#6b7280;font-size:0.92rem;margin:0.25rem 0 1rem 0;}
.meta code{background:#f3f4f6;border:1px solid #e5e7eb;padding:2px 6px;border-radius:6px;}
.card{border:1px solid #e5e7eb;border-radius:14px;background:#ffffff;box-shadow:0 2px 8px rgba(0,0,0,.04);} 
.card.pad{padding:22px;}
.result-card{border:1px solid #e5e7eb;border-radius:14px;padding:16px;background:#fafafa;}
.stButton>button{border-radius:10px;padding:.65rem 1rem;font-weight:600;}
.stDownloadButton>button{border-radius:10px;}
</style>
""", unsafe_allow_html=True)

with st.expander("–ü–æ–º–æ—â—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", expanded=False):
    tabs = st.tabs(["–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–°–æ–∑–¥–∞–Ω–∏–µ Access Key", "–û–∫—Ä—É–∂–µ–Ω–∏–µ"])
    with tabs[0]:
        st.markdown("#### 1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AWS CLI v2")
        st.code('''curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"\nsudo installer -pkg AWSCLIV2.pkg -target /''', language="bash")
        st.code("aws --version", language="bash")
        st.markdown("#### 2) –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.code("aws configure", language="bash")
        st.markdown("#### 3) –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        st.code("streamlit run main.py", language="bash")
    with tabs[1]:
        st.markdown("### üîë –°–æ–∑–¥–∞–Ω–∏–µ Access Key (CLI)")
        st.markdown("–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –∫–ª—é—á–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ –∫–æ–¥–∞/CLI. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –≤ AWS IAM.")
    with tabs[2]:
        st.markdown("### –û–∫—Ä—É–∂–µ–Ω–∏–µ")
        st.markdown(f"- Bucket: `{BUCKET_NAME}`\n- Region: `{AWS_REGION}`")

# --- –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ---
with st.form("upload_form", clear_on_submit=False):
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
        type=["pdf", "jpg", "png", "jpeg"],
        accept_multiple_files=False,
        help="–ü–æ–¥–¥–µ—Ä–∂–∫–∞: PDF, JPEG",
    )
    submitted = st.form_submit_button("–ó–∞–≥—Ä—É–∑–∏—Ç—å", type="primary")


# ===================== –§–£–ù–ö–¶–ò–ò ============================

def get_s3_client(profile, region_name):
    if profile:
        session = boto3.session.Session(profile_name=profile, region_name=region_name or None)
        return session.client("s3")
    return boto3.client("s3", region_name=region_name or None)

def get_next_upload_folder(s3_client, bucket, prefix):
    try:
        paginator = s3_client.get_paginator("list_objects_v2")
        existing_max = 0
        for page in paginator.paginate(Bucket=bucket, Prefix=prefix, Delimiter="/"):
            for cp in page.get("CommonPrefixes", []) or []:
                p = cp.get("Prefix", "")
                m = re.search(r"upload_id_(\d{3,})/\Z", p)
                if m:
                    existing_max = max(existing_max, int(m.group(1)))
        next_id = existing_max + 1
        return f"{prefix}upload_id_{next_id:03d}/"
    except Exception:
        ts = datetime.utcnow().strftime("%Y%m%d-%H%M%S")
        return f"{prefix}upload_id_{ts}/"

# =============== –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° =========================
if submitted:
    if not BUCKET_NAME:
        st.error("S3-–±–∞–∫–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    elif not uploaded_file:
        st.error("–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    else:
        try:
            s3 = get_s3_client(AWS_PROFILE.strip() or None, AWS_REGION)

            original_name = uploaded_file.name
            base_prefix = (KEY_PREFIX or "").strip() or "uploads/"
            if base_prefix and not base_prefix.endswith("/"):
                base_prefix += "/"

            upload_folder = get_next_upload_folder(s3, BUCKET_NAME, base_prefix)
            input_folder = f"{upload_folder}input/"
            key = f"{input_folder}{original_name}"


            uploaded_file.seek(0)
            content_type = getattr(uploaded_file, "type", None) or "application/octet-stream"
            with st.status("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...", expanded=False) as status:
                s3.upload_fileobj(
                    Fileobj=uploaded_file,
                    Bucket=BUCKET_NAME,
                    Key=key,
                    ExtraArgs={"ContentType": content_type},
                )
                status.update(label="–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", state="complete")

            s3_uri = f"s3://{BUCKET_NAME}/{key}"
            st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {s3_uri}")

            st.session_state["last_s3_bucket"] = BUCKET_NAME
            st.session_state["last_s3_key"] = key
            st.session_state["last_s3_uri"] = s3_uri

        except NoCredentialsError:
            st.error("AWS-—É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ ~/.aws/credentials –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        except ClientError as e:
            err = e.response.get("Error", {})
            st.error(f"AWS ClientError: {err.get('Code', 'Unknown')} - {err.get('Message', str(e))}")
        except (BotoCoreError, Exception) as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
